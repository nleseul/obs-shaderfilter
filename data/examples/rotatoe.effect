// Rotation Effect By Charles Fettinger (https://github.com/Oncorporation)  10/2019

uniform float4x4 ViewProj;
uniform texture2d image;

uniform float elapsed_time;
uniform float2 uv_offset;
uniform float2 uv_scale;
uniform float2 uv_pixel_interval;
uniform float rand_f;
uniform float2 uv_size;

uniform int speed_percent = 50; //<Range(-10.0, 10.0)>
uniform float Axis_X = 0.0;
uniform float Axis_Y = 0.0;
uniform float Axis_Z = 1.0;
uniform float Angle_Degrees = 45.0;
uniform bool Rotate_Transform = true;
uniform bool Rotate_Pixels = false;
uniform bool Rotate_Colors = false;
uniform int center_width_percentage = 50;
uniform int center_height_percentage = 50;

uniform string notes = " Choose axis, angle and speed, then rotate away! center_width_percentage & center_height_percentage allow you to change the pixel spin axis";

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Border;
	AddressV  = Border;
	BorderColor = 00000000;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

float3x3 rotAxis(float3 axis, float a) {
	float s=sin(a);
	float c=cos(a);
	float oc=1.0-c;

	float3 as=axis*s;

	float3x3 p=float3x3(axis.x*axis,axis.y*axis,axis.z*axis);
	float3x3 q=float3x3(c,-as.z,as.y,as.z,c,-as.x,-as.y,as.x,c);
	return p*oc+q;
}

VertData mainTransform(VertData v_in)
{
	VertData vert_out;
	vert_out.pos =  mul(float4(v_in.pos.xyz, 1.0), ViewProj);

	float speed = (float)speed_percent * 0.01;
	// circular easing variable
	float PI = 3.1415926535897932384626433832795; //acos(-1);
	float PI180th = 0.0174532925; //PI divided by 180
	float direction = abs(sin((elapsed_time - 0.001) * speed));	
	float t = sin(elapsed_time * speed);
	float angle_degrees = PI180th * Angle_Degrees;

	// use matrix to transform rotation
	if (Rotate_Transform)
		vert_out.pos.xyz = mul(vert_out.pos.xyz,rotAxis(float3(Axis_X,Axis_Y,Axis_Z), (angle_degrees * t))).xyz;

	vert_out.uv  = v_in.uv * uv_scale + uv_offset;

	return vert_out;
}

float4 mainImage(VertData v_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, v_in.uv);
	
	float speed = (float)speed_percent * 0.01;
	// circular easing variable
	float PI = 3.1415926535897932384626433832795; //acos(-1);
	float PI180th = 0.0174532925; //PI divided by 180
	float direction = abs(sin((elapsed_time - 0.001) * speed));	
	float t = sin(elapsed_time * speed);
	float angle_degrees = PI180th * Angle_Degrees;


	// use matrix to transform pixels
	if (Rotate_Pixels)
	{
		float2 center_pixel_coordinates = float2(((float)center_width_percentage * 0.01), ((float)center_height_percentage * 0.01) );
		rgba = image.Sample(textureSampler, mul(v_in.uv - center_pixel_coordinates ,rotAxis(float3(Axis_X ,Axis_Y, Axis_Z ), (angle_degrees * t))).xy + center_pixel_coordinates);
	}
	if (Rotate_Colors)
		rgba.rgb = mul(rgba.rgb, rotAxis(float3(Axis_X,Axis_Y,Axis_Z), (angle_degrees * t))).xyz;

	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader  = mainImage(v_in);
	}
}
