// OBS Default
uniform float4x4 ViewProj;

// Settings (Shared)
uniform texture2d image;
uniform float2 imageSize;
uniform float2 imageTexel;
uniform int u_radius;
uniform int u_diameter;
uniform float2 u_texelDelta;

uniform float elapsed_time;
uniform float2 uv_offset;
uniform float2 uv_scale;
uniform float2 uv_pixel_interval;

// Settings (Private)
//uniform float registerkernel[25];
uniform texture2d kernel;
uniform float2 kernelTexel;
uniform float pixel_size = 1.0;

sampler_state pointClampSampler {
	Filter    = Point;
	AddressU  = Clamp;
	AddressV  = Clamp;
	MinLOD    = 0;
	MaxLOD    = 0;
};

sampler_state bilinearClampSampler {
	Filter    = Bilinear;
	AddressU  = Clamp;
	AddressV  = Clamp;
	MinLOD    = 0;
	MaxLOD    = 0;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

float Gaussian(float x, float o)
{
	float pivalue = 3.1415926535897932384626433832795;
	return (1.0 / (o * sqrt(2.0 * pivalue))) * exp((-(x * x)) / (2 * (o * o)));
};

VertData VSDefault(VertData vert_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 InternalGaussian(float2 p_uv, float2 p_uvStep, int p_radius,
  texture2d p_image, float2 p_imageTexel)
  {    
	float l_gauss = Gaussian(0.0, 1.0);
	float4 l_value = p_image.Sample(pointClampSampler, p_uv) * l_gauss;
	float2 l_uvoffset = float2(0, 0);
	for (int k = 1; k <= p_radius; k++) {
		l_uvoffset += p_uvStep;
        float l_g = Gaussian(k, dot(uv_pixel_interval, 1));
		float4 l_p = p_image.Sample(pointClampSampler, p_uv + l_uvoffset) * l_g;
		float4 l_n = p_image.Sample(pointClampSampler, p_uv - l_uvoffset) * l_g;
		l_value += l_p + l_n;
		l_gauss += l_g;
	}
	l_value = l_value * (1.0 / l_gauss);
	return l_value;
}

float4 InternalGaussianPrecalculated(float2 p_uv, float2 p_uvStep, int p_radius,
  texture2d p_image, float2 p_imageTexel,
  texture2d p_kernel, float2 p_kernelTexel)
  {
	float4 l_value = p_image.Sample(pointClampSampler, p_uv)
		* kernel.Sample(pointClampSampler, float2(0, 0)).r;
	float2 l_uvoffset = float2(0, 0);
	for (int k = 1; k <= p_radius; k++) {
		l_uvoffset += p_uvStep;
		float l_g = p_kernel.Sample(pointClampSampler, p_kernelTexel * k).r;
		float4 l_p = p_image.Sample(pointClampSampler, p_uv + l_uvoffset) * l_g;
		float4 l_n = p_image.Sample(pointClampSampler, p_uv - l_uvoffset) * l_g;
		l_value += l_p + l_n;
	}
	return l_value;
}

/*float4 InternalGaussianPrecalculatedNVOptimized(float2 p_uv, int pixel_size,
  texture2d p_image, float2 p_imageTexel,
  texture2d p_kernel, float2 p_kernelTexel)
  {
	if (pixel_size % 2 == 0) {
		float4 l_value = p_image.Sample(pointClampSampler, p_uv)
			* kernel.Sample(pointClampSampler, float2(0, 0)).r;
		float2 l_uvoffset = p_texel;
		float2 l_koffset = p_kernelTexel;
		for (int k = 1; k <= pixel_size; k++) {
			float l_g = p_kernel.Sample(pointClampSampler, l_koffset).r;
			float4 l_p = p_image.Sample(pointClampSampler, p_uv + l_uvoffset) * l_g;
			float4 l_n = p_image.Sample(pointClampSampler, p_uv - l_uvoffset) * l_g;
			l_value += l_p + l_n;
			l_uvoffset += p_texel;
			l_koffset += p_kernelTexel;
		}
		return l_value;
	} else {
		return InternalGaussianPrecalculated(p_uv, p_image, p_texel, pixel_size, p_kernel, p_kerneltexel);)
	}
}*/

float4 PSGaussian(VertData vert_in) : TARGET 
{
	
	float4 color = image.Sample(pointClampSampler, vert_in.uv);

	float intensity = dot(color * 1 ,float3(0.299,0.587,0.114));

	return InternalGaussian(vert_in.uv, uv_offset, (int)sqrt((uv_pixel_interval.x * uv_pixel_interval.x) + (uv_pixel_interval.y * uv_pixel_interval.y)), image, uv_scale);

	/*
	return InternalGaussianPrecalculated(
		vert_in.uv, u_texelDelta, u_radius,
		image, imageTexel,
		kernel, kernelTexel);
	*/

	/*
	return InternalGaussianPrecalculatedNVOptimize(
		vert_in.uv, u_texelDelta, u_radius,
		image, imageTexel,
		kernel, kernelTexel);
	*/
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSGaussian(vert_in);
	}
}
