// Repeat Effect By Charles Fettinger (https://github.com/Oncorporation)  2/2019

uniform float4x4 ViewProj;
uniform float4x4 color_matrix;
uniform float3 color_range_min = {0.0, 0.0, 0.0};
uniform float3 color_range_max = {1.0, 1.0, 1.0};
uniform texture2d image;
uniform texture2d tex_image;

uniform float elapsed_time;
uniform float2 uv_offset;
uniform float2 uv_scale;
uniform float2 uv_pixel_interval;
uniform float2 uv_size;
uniform float rand_f;

uniform float blend = 1.0;
uniform float copies = 4.0;
uniform string notes = 'copies, use a number that has a square root. Blend adjusts the ratio of source and texture';
uniform float alpha_percentage = 100.0;

sampler_state tex_sampler {
	Filter   = Linear;
	AddressU = Repeat;
	AddressV = Repeat;
};

sampler_state base_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertIn {
	float4 pos : POSITION;
	float2 uv_0  : TEXCOORD0;
	float2 uv_1  : TEXCOORD1;
};

struct VertOut {
	float4 pos  : POSITION;
	float2 uv_0 : TEXCOORD0;
    float2 uv_1 : TEXCOORD1;
};

VertOut VSDefault(VertIn vert_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1 ), ViewProj);
    vert_out.uv_1 = vert_in.uv_0;
	vert_out.uv_0  = vert_in.uv_0 * sqrt(copies);
	return vert_out;
}

float4 PSDrawBare(VertOut vert_in) : TARGET
{
	float alpha = clamp(alpha_percentage * 0.01 ,-1.0,2.0);
    float4 tex = tex_image.Sample(tex_sampler, vert_in.uv_0);
    float4 base = image.Sample(base_sampler, vert_in.uv_1);

    return (1 - alpha) * base + (alpha) * tex;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}
